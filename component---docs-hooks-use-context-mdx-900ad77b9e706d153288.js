(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"Flc+":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return m}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),r=n("TjRS"),a=n("goH/");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/hooks/useContext.mdx"}});var b={_frontmatter:c},p=r.a;function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(o.b)(p,i({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"基础用法"},"基础用法"),Object(o.b)(a.a,{mdxType:"ContextDemo"}),Object(o.b)("p",null,"Context 本身只是提供一个容器，可以往里塞任何东西。基础用法中因为每次 ",Object(o.b)("inlineCode",{parentName:"p"},"setTheme")," 导致 ",Object(o.b)("inlineCode",{parentName:"p"},"App")," 组件 re-render，所以每次 Foo 组件和 Bar 组件都能拿到一致的 theme。但是要注意其实 Context 本身不是响应式的，在一个模块改了另外一个模块感知不到。"),Object(o.b)(a.b,{mdxType:"ContextDemo2"}),Object(o.b)("h2",{id:"多个context"},"多个Context"))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/hooks/useContext.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-hooks-use-context-mdx-900ad77b9e706d153288.js.map