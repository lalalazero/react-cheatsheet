{"version":3,"sources":["webpack:///../docs/hooks/useContext.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ggBAOO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,0LACA,iBAAQ,CACN,GAAM,QADR,QAGA,qFAAoE,0BAAYC,WAAW,KAAvB,0BAApE,mHACA,YAAC,IAAD,CAAaD,QAAQ,gBACrB,iBAAQ,CACN,GAAM,aADR,aAGA,kEACA,YAAC,IAAD,CAAiBA,QAAQ,oBACzB,mDACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,uM,yMAcTJ,EAAWK,gBAAiB","file":"component---docs-hooks-use-context-mdx-cd129bcbb430335b656e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-cheatsheet/react-cheatsheet/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { ContextDemo, MultipleContext } from '../../component/hooks/UseContext';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"context\"\n    }}>{`Context`}</h2>\n    <p>{`Context 用来在跨组件传值，或者多个组件共享数据。类似 Redux 的 state，在需要的地方 connnet 上去，但是 Redux 支持的功能更强大。Context 只是一个全局容器，可以挂载任何数据，然后在需要的地方使用。如果没有 Context ，就会需要组件层层传递 props，陷入 props 地狱。`}</p>\n    <h2 {...{\n      \"id\": \"基础用法\"\n    }}>{`基础用法`}</h2>\n    <p>{`Context.Provider 的 value 属性改变会导致用到 Context 的地方 re-render，避免写 `}<inlineCode parentName=\"p\">{`value={{ data: data }}`}</inlineCode>{` 这样的代码，因为每次父节点 re-render 的时候重新给 value 生成了新的对象，导致所有用到 Context 的子孙节点都会 re-render。打开控制台会看到 Other 组件每次都重新 render 了。`}</p>\n    <ContextDemo mdxType=\"ContextDemo\" />\n    <h2 {...{\n      \"id\": \"多个context\"\n    }}>{`多个Context`}</h2>\n    <p>{`当需要消费多个 Context 时，之前用 Context.Consumer 嵌套`}</p>\n    <MultipleContext mdxType=\"MultipleContext\" />\n    <p>{`用 useContext 改写之后，代码不用再嵌套。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Foo = () => {\n    const theme = useContext(ThemeContext)\n    const user = useContext(UserContext)\n    return (\n        <div>theme: { theme}, user: { user.name} </div>\n    )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}