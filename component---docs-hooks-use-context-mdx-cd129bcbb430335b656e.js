(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"Flc+":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return i}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),r=n("TjRS"),a=n("goH/");n("aD51");function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/hooks/useContext.mdx"}});var s={_frontmatter:u},b=r.a;function i(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(o.b)(b,c({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"context"},"Context"),Object(o.b)("p",null,"Context 用来在跨组件传值，或者多个组件共享数据。类似 Redux 的 state，在需要的地方 connnet 上去，但是 Redux 支持的功能更强大。Context 只是一个全局容器，可以挂载任何数据，然后在需要的地方使用。如果没有 Context ，就会需要组件层层传递 props，陷入 props 地狱。"),Object(o.b)("h2",{id:"基础用法"},"基础用法"),Object(o.b)("p",null,"Context.Provider 的 value 属性改变会导致用到 Context 的地方 re-render，避免写 ",Object(o.b)("inlineCode",{parentName:"p"},"value={{ data: data }}")," 这样的代码，因为每次父节点 re-render 的时候重新给 value 生成了新的对象，导致所有用到 Context 的子孙节点都会 re-render。打开控制台会看到 Other 组件每次都重新 render 了。"),Object(o.b)(a.a,{mdxType:"ContextDemo"}),Object(o.b)("h2",{id:"多个context"},"多个Context"),Object(o.b)("p",null,"当需要消费多个 Context 时，之前用 Context.Consumer 嵌套"),Object(o.b)(a.b,{mdxType:"MultipleContext"}),Object(o.b)("p",null,"用 useContext 改写之后，代码不用再嵌套。"),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-jsx"}),"const Foo = () => {\n    const theme = useContext(ThemeContext)\n    const user = useContext(UserContext)\n    return (\n        <div>theme: { theme}, user: { user.name} </div>\n    )\n}\n")))}void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/hooks/useContext.mdx"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-hooks-use-context-mdx-cd129bcbb430335b656e.js.map