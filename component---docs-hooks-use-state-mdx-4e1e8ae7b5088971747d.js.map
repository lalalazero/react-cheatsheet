{"version":3,"sources":["webpack:///../docs/hooks/useState.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4gBAQO,IAAMA,EAAe,Q,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,YAAC,IAAD,CAASA,QAAQ,YACjB,iBAAQ,CACN,GAAM,eADR,eAGA,0BAAS,0BAAYC,WAAW,KAAvB,SAAT,cAAyE,0BAAYA,WAAW,KAAvB,YAAzE,kBAAgJ,0BAAYA,WAAW,KAAvB,SAAhJ,QAA0M,0BAAYA,WAAW,KAAvB,YAA1M,2BAA0R,0BAAYA,WAAW,KAAvB,OAA1R,MAAgV,0BAAYA,WAAW,KAAvB,QAAhV,gBAAiZ,0BAAYA,WAAW,KAAvB,wEAAjZ,aACI,0BAAYA,WAAW,KAAvB,iBADJ,OACqE,0BAAYA,WAAW,KAAvB,OADrE,iBACsI,0BAAYA,WAAW,KAAvB,aADtI,OAEA,YAAC,IAAD,CAAeD,QAAQ,kBACvB,iBAAQ,CACN,GAAM,QADR,QAGA,iCAAgB,0BAAYC,WAAW,KAAvB,cAAhB,SAAgF,0BAAYA,WAAW,KAAvB,aAChF,YAAC,IAAD,CAAkBD,QAAQ,qBAC1B,+NAGA,YAAC,IAAD,CAAkBA,QAAQ,qBAC1B,oIACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,sBACE,kBAAIC,WAAW,MAAf,uBAA4C,0BAAYA,WAAW,MAAvB,aAA5C,gCACA,kBAAIA,WAAW,MAAf,8CACA,kBAAIA,WAAW,MAAf,gDACA,kBAAIA,WAAW,MAAf,2DACA,kBAAIA,WAAW,MAAf,4CAEF,4BACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sGADQ,sGAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,qDAItB,iBAAQ,CACN,GAAM,6BADR,6BAGA,YAAC,IAAD,CAAcD,QAAQ,iBACtB,iBAAQ,CACN,GAAM,QADR,QAGA,qBAAG,0BAAYC,WAAW,KAAvB,YAAH,uCAA+F,0BAAYA,WAAW,KAAvB,4CAC/F,sBACE,kBAAIA,WAAW,MAAf,wBACA,kBAAIA,WAAW,MAAf,yBACA,kBAAIA,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,qBACA,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,sBAA2C,0BAAYA,WAAW,MAAvB,6C,uMAMjDJ,EAAWK,gBAAiB","file":"component---docs-hooks-use-state-mdx-4e1e8ae7b5088971747d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-cheatsheet/react-cheatsheet/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Starter, MyUseStateDemo01, MyUseStateDemo02, StateIsObject } from '../../component/hooks/UseState';\nimport StaleClosure from '../../component/hooks/StaleClosure';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"基础用法\"\n    }}>{`基础用法`}</h2>\n    <Starter mdxType=\"Starter\" />\n    <h2 {...{\n      \"id\": \"state-是复杂对象\"\n    }}>{`state 是复杂对象`}</h2>\n    <p>{`当 `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` 是一个复杂对象时， `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` 的时候要注意返回一个完整的 `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` ，因为 `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` 不会帮你做属性合并。示例如下，当更新地址时， `}<inlineCode parentName=\"p\">{`age`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` 都丢失了。正确的做法是 `}<inlineCode parentName=\"p\">{`setStudent({...student, location: { region: 'CN', city: 'beijing'}})`}</inlineCode>{` 。\n还需要注意 `}<inlineCode parentName=\"p\">{`setState(obj)`}</inlineCode>{` 时， `}<inlineCode parentName=\"p\">{`obj`}</inlineCode>{` 的地址如果没变，也是不会 `}<inlineCode parentName=\"p\">{`re-render`}</inlineCode>{` 的。`}</p>\n    <StateIsObject mdxType=\"StateIsObject\" />\n    <h2 {...{\n      \"id\": \"实现原理\"\n    }}>{`实现原理`}</h2>\n    <p>{`利用闭包实现一个 `}<inlineCode parentName=\"p\">{`MyUseState`}</inlineCode>{`，功能类似 `}<inlineCode parentName=\"p\">{`useState`}</inlineCode></p>\n    <MyUseStateDemo01 mdxType=\"MyUseStateDemo01\" />\n    <p>{`单次使用 myUseState 看起来已经可以了，多次使用呢？会有问题。\n继续改造，把 state 作为数组，增加一个 index 记录 MyUseState 出现的位置，每次 re-render 的时候保证按照这个顺序依次调用（\n这样同时能拿到 index 对应的 state ），这也是为什么 useState 不能出现在条件语句中，必须保证每次 render 的时候调用顺序都完全一致。`}</p>\n    <MyUseStateDemo02 mdxType=\"MyUseStateDemo02\" />\n    <p>{`可以看到每次 state 的更新带来的 re-render 都会按照顺序再次执行 useState（注意 render 的时候 index 都会重置为 0 ), 只是每个单独的 state 的值都被闭包缓存了下来。`}</p>\n    <h2 {...{\n      \"id\": \"真正的-react-世界\"\n    }}>{`真正的 React 世界`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`一个函数组件就是一个 React 节点(`}<inlineCode parentName=\"li\">{`FiberNode`}</inlineCode>{`)，每个组件都有一个自己的 _state 和 index`}</li>\n      <li parentName=\"ol\">{`_state 对应的是 memorizedState, index 的实现用到了链表`}</li>\n      <li parentName=\"ol\">{`useState 读取 _state`}{`[index]`}{`，并返回闭包得到的最新的值`}</li>\n      <li parentName=\"ol\">{`index 由 useState 出现的顺序决定（为了保证执行顺序，useState 绝对不能写在条件语句里）`}</li>\n      <li parentName=\"ol\">{`setState 会触发当前组件重新执行，并再次按照顺序执行 useState`}</li>\n    </ol>\n    <p>{`参考：`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2020-3-24-9-43-8.pdf\"\n        }}>{`https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2020-3-24-9-43-8.pdf`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://juejin.im/post/5bdfc1c4e51d4539f4178e1f\"\n        }}>{`https://juejin.im/post/5bdfc1c4e51d4539f4178e1f`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"其他发散---过时闭包-stale-closure\"\n    }}>{`其他发散 - 过时闭包 Stale Closure`}</h2>\n    <StaleClosure mdxType=\"StaleClosure\" />\n    <h2 {...{\n      \"id\": \"要点总结\"\n    }}>{`要点总结`}</h2>\n    <p><inlineCode parentName=\"p\">{`useState`}</inlineCode>{` 作用在函数式组件中，可以让函数式组件像 Class 组件一样拥有状态。`}<inlineCode parentName=\"p\">{`[state, setState] = useState(initState)`}</inlineCode></p>\n    <ol>\n      <li parentName=\"ol\">{`useState 的初始值可以是任意的值`}</li>\n      <li parentName=\"ol\">{`useState 的初始化可以接受一个函数`}</li>\n      <li parentName=\"ol\">{`useState 的 state 变化会导致当前函数组件的 re-render`}</li>\n      <li parentName=\"ol\">{`useState 是按照顺序执行的`}</li>\n      <li parentName=\"ol\">{`useState 不能写在条件语句中(why?)`}</li>\n      <li parentName=\"ol\">{`setState 也可以接受一个函数 `}<inlineCode parentName=\"li\">{`setState((prevState) => newState)`}</inlineCode></li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}